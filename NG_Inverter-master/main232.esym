C L "MAIN" 0 120 2 "FUNCTION"
D G "__PCM__" 0 293 ""5.015""
D G "__DEVICE__" 0 293 "690"
D G "__DATE__" 0 293 ""19-Nov-19""
D G "__TIME__" 0 293 ""16:47:35"" "Standard Header file for the PIC16F690 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 37 "int8" `54 
f B "set_tris_a" 2 37 "void(int8 value)" `53 
v L "value" 2 38 "int8" `56 
f B "set_tris_b" 2 38 "void(int8 value)" `55 
v L "value" 2 39 "int8" `58 
f B "set_tris_c" 2 39 "void(int8 value)" `57 
f B "get_tris_a" 2 40 "int8()" `59 
f B "get_tris_b" 2 41 "int8()" `60 
f B "get_tris_c" 2 42 "int8()" `61 
v L "value" 2 43 "int8" `63 
f B "output_a" 2 43 "void(int8 value)" `62 
v L "value" 2 44 "int8" `65 
f B "output_b" 2 44 "void(int8 value)" `64 
v L "value" 2 45 "int8" `67 
f B "output_c" 2 45 "void(int8 value)" `66 
f B "input_a" 2 46 "int8()" `68 
f B "input_b" 2 47 "int8()" `69 
f B "input_c" 2 48 "int8()" `70 
f B "input_change_a" 2 49 "int8()" `71 
f B "input_change_b" 2 50 "int8()" `72 
f B "input_change_c" 2 51 "int8()" `73 
v L "pin" 2 52 "int16" `75 
f B "input" 2 52 "int8(int16 pin)" `74 
v L "pin" 2 53 "int16" `77 
f B "input_state" 2 53 "int8(int16 pin)" `76 
v L "pin" 2 54 "int16" `79 
f B "output_low" 2 54 "void(int16 pin)" `78 
v L "pin" 2 55 "int16" `81 
f B "output_high" 2 55 "void(int16 pin)" `80 
v L "pin" 2 56 "int16" `83 
f B "output_toggle" 2 56 "void(int16 pin)" `82 
v L "pin" 2 57 "int16" `85 
v L "level" 2 57 "int8" `86 
f B "output_bit" 2 57 "void(int16 pin,int8 level)" `84 
v L "pin" 2 58 "int16" `88 
f B "output_float" 2 58 "void(int16 pin)" `87 
v L "pin" 2 59 "int16" `90 
f B "output_drive" 2 59 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 63 "40"
d G "PIN_A1" 2 64 "41"
d G "PIN_A2" 2 65 "42"
d G "PIN_A3" 2 66 "43"
d G "PIN_A4" 2 67 "44"
d G "PIN_A5" 2 68 "45"
d G "PIN_B4" 2 70 "52"
d G "PIN_B5" 2 71 "53"
d G "PIN_B6" 2 72 "54"
d G "PIN_B7" 2 73 "55"
d G "PIN_C0" 2 75 "56"
d G "PIN_C1" 2 76 "57"
d G "PIN_C2" 2 77 "58"
d G "PIN_C3" 2 78 "59"
d G "PIN_C4" 2 79 "60"
d G "PIN_C5" 2 80 "61"
d G "PIN_C6" 2 81 "62"
d G "PIN_C7" 2 82 "63"
d G "FALSE" 2 85 "0"
d G "TRUE" 2 86 "1"
d G "BYTE" 2 88 "int8"
d G "BOOLEAN" 2 89 "int1"
d G "getc" 2 91 "getch"
d G "fgetc" 2 92 "getch"
d G "getchar" 2 93 "getch"
d G "putc" 2 94 "putchar"
d G "fputc" 2 95 "putchar"
d G "fgets" 2 96 "gets"
d G "fputs" 2 97 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 102 "int8()" `91 
f B "reset_cpu" 2 103 "void()" `92 
f B "sleep" 2 104 "void()" `93  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 106 "3"
d G "WDT_TIMEOUT" 2 107 "11"
d G "MCLR_FROM_SLEEP" 2 108 "19"
d G "MCLR_FROM_RUN" 2 109 "27"
d G "NORMAL_POWER_UP" 2 110 "25"
d G "BROWNOUT_RESTART" 2 111 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 118 "int8" `95 
f B "setup_timer_0" 2 118 "void(int8 mode)" `94 
v L "value" 2 119 "int8" `97 
f B "set_timer0" 2 119 "void(int8 value)" `96 
f B "get_timer0" 2 120 "int8()" `98 
v L "mode" 2 121 "int8" `100 
v L "prescaler" 2 121 "int8" `101 
f B "setup_counters" 2 121 "void(int8 mode,int8 prescaler)" `99 
v L "value" 2 122 "int8" `103 
f B "set_rtcc" 2 122 "void(int8 value)" `102 
f B "get_rtcc" 2 123 "int8()" `104  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 125 "0"
d G "T0_EXT_L_TO_H" 2 126 "32"
d G "T0_EXT_H_TO_L" 2 127 "48"
d G "T0_DIV_1" 2 129 "8"
d G "T0_DIV_2" 2 130 "0"
d G "T0_DIV_4" 2 131 "1"
d G "T0_DIV_8" 2 132 "2"
d G "T0_DIV_16" 2 133 "3"
d G "T0_DIV_32" 2 134 "4"
d G "T0_DIV_64" 2 135 "5"
d G "T0_DIV_128" 2 136 "6"
d G "T0_DIV_256" 2 137 "7"
d G "T0_8_BIT" 2 140 "0"
d G "RTCC_INTERNAL" 2 142 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 143 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 144 "48"
d G "RTCC_DIV_1" 2 145 "8"
d G "RTCC_DIV_2" 2 146 "0"
d G "RTCC_DIV_4" 2 147 "1"
d G "RTCC_DIV_8" 2 148 "2"
d G "RTCC_DIV_16" 2 149 "3"
d G "RTCC_DIV_32" 2 150 "4"
d G "RTCC_DIV_64" 2 151 "5"
d G "RTCC_DIV_128" 2 152 "6"
d G "RTCC_DIV_256" 2 153 "7"
d G "RTCC_8_BIT" 2 154 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 165 "int16" `106 
f B "setup_wdt" 2 165 "void(int16 mode)" `105 
f B "restart_wdt" 2 166 "void()" `107  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 169 "8"
d G "WDT_36MS" 2 170 "9"
d G "WDT_72MS" 2 171 "10"
d G "WDT_144MS" 2 172 "11"
d G "WDT_288MS" 2 173 "12"
d G "WDT_576MS" 2 174 "13"
d G "WDT_1152MS" 2 175 "14"
d G "WDT_2304MS" 2 176 "15"
d G "WDT_ON" 2 181 "0x4000"
d G "WDT_OFF" 2 182 "0"
d G "WDT_DIV_16" 2 183 "0x100"
d G "WDT_DIV_8" 2 184 "0x300"
d G "WDT_DIV_4" 2 185 "0x500"
d G "WDT_DIV_2" 2 186 "0x700"
d G "WDT_TIMES_1" 2 187 "0x900" "Default"
d G "WDT_TIMES_2" 2 188 "0xB00"
d G "WDT_TIMES_4" 2 189 "0xD00"
d G "WDT_TIMES_8" 2 190 "0xF00"
d G "WDT_TIMES_16" 2 191 "0x1100"
d G "WDT_TIMES_32" 2 192 "0x1300"
d G "WDT_TIMES_64" 2 193 "0x1500"
d G "WDT_TIMES_128" 2 194 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 199 "int16" `109 
f B "setup_timer_1" 2 199 "void(int16 mode)" `108 
f B "get_timer1" 2 200 "int16()" `110 
v L "value" 2 201 "int16" `112 
f B "set_timer1" 2 201 "void(int16 value)" `111  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 204 "0"
d G "T1_INTERNAL" 2 205 "5"
d G "T1_EXTERNAL" 2 206 "7"
d G "T1_EXTERNAL_SYNC" 2 207 "3"
d G "T1_CLK_OUT" 2 209 "8"
d G "T1_DIV_BY_1" 2 211 "0"
d G "T1_DIV_BY_2" 2 212 "0x10"
d G "T1_DIV_BY_4" 2 213 "0x20"
d G "T1_DIV_BY_8" 2 214 "0x30"
d G "T1_GATE" 2 216 "0x40"
d G "T1_GATE_INVERTED" 2 217 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 222 "int8" `114 
v L "period" 2 222 "int8" `115 
v L "postscale" 2 222 "int8" `116 
f B "setup_timer_2" 2 222 "void(int8 mode,int8 period,int8 postscale)" `113 
f B "get_timer2" 2 223 "int8()" `117 
v L "value" 2 224 "int8" `119 
f B "set_timer2" 2 224 "void(int8 value)" `118  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 226 "0"
d G "T2_DIV_BY_1" 2 227 "4"
d G "T2_DIV_BY_4" 2 228 "5"
d G "T2_DIV_BY_16" 2 229 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 235 "int32" `121 
f B "setup_ccp1" 2 235 "void(int32 mode)" `120 
v L "mode" 2 236 "int32" `123 
v L "pwm" 2 236 "int8" `124 
f G "setup_ccp1" 2 236 "void(int32 mode,int8 pwm)" `122 
v L "value" 2 237 "int16" `126 
f B "set_pwm1_duty" 2 237 "void(int16 value)" `125  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 239 "0"
d G "CCP_CAPTURE_FE" 2 240 "4"
d G "CCP_CAPTURE_RE" 2 241 "5"
d G "CCP_CAPTURE_DIV_4" 2 242 "6"
d G "CCP_CAPTURE_DIV_16" 2 243 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 244 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 245 "9"
d G "CCP_COMPARE_INT" 2 246 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 247 "0xB"
d G "CCP_PWM" 2 248 "0xC"
d G "CCP_PWM_PLUS_1" 2 249 "0x1c"
d G "CCP_PWM_PLUS_2" 2 250 "0x2c"
d G "CCP_PWM_PLUS_3" 2 251 "0x3c"
d G "CCP_PWM_H_H" 2 256 "0x0c"
d G "CCP_PWM_H_L" 2 257 "0x0d"
d G "CCP_PWM_L_H" 2 258 "0x0e"
d G "CCP_PWM_L_L" 2 259 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 261 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 262 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 263 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 265 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 266 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 267 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 268 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 269 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 270 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 271 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 273 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 274 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 275 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 277 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 278 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 279 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 281 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 283 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 284 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 285 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 286 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 287 "0x10000000"
c L "set_pwm1_duty" 2 3 3 "FUNCTION"
v L "mode" 2 292 "int32" `131 
f B "setup_spi" 2 292 "void(int32 mode)" `130 
v L "value" 2 293 "int8" `133 
f B "spi_write" 2 293 "void(int8 value)" `132 
f B "spi_read" 2 294 "int8()" `134 
v L "value" 2 295 "int8" `136 
f G "spi_read" 2 295 "int8(int8 value)" `135 
f B "spi_data_in" 2 296 "int8()" `137  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 298 "0x00"
d G "SPI_MASTER" 2 299 "0x20"
d G "SPI_SLAVE" 2 300 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 301 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 302 "0x00"
d G "SPI_CLK_DIV_4" 2 303 "0x00"
d G "SPI_CLK_DIV_16" 2 304 "0x01"
d G "SPI_CLK_DIV_64" 2 305 "0x02"
d G "SPI_CLK_T2" 2 306 "0x03"
d G "SPI_SS_DISABLED" 2 307 "0x01"
d G "SPI_XMIT_L_TO_H" 2 309 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 310 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 312 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 313 "0x8000"
d G "SPI_L_TO_H" 2 316 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 317 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 321 "int32" `139 
f B "setup_uart" 2 321 "void(int32 baud)" `138 
v L "baud" 2 322 "int32" `141 
v L "stream" 2 322 "int8" `142 
f G "setup_uart" 2 322 "void(int32 baud,int8 stream)" `140 
v L "baud" 2 323 "int32" `144 
v L "stream" 2 323 "int8" `145 
v L "clock" 2 323 "int32" `146 
f G "setup_uart" 2 323 "void(int32 baud,int8 stream,int32 clock)" `143 
v L "baud" 2 324 "int32" `148 
f B "set_uart_speed" 2 324 "void(int32 baud)" `147 
v L "baud" 2 325 "int32" `150 
v L "stream" 2 325 "int8" `151 
f G "set_uart_speed" 2 325 "void(int32 baud,int8 stream)" `149 
v L "baud" 2 326 "int32" `153 
v L "stream" 2 326 "int8" `154 
v L "clock" 2 326 "int32" `155 
f G "set_uart_speed" 2 326 "void(int32 baud,int8 stream,int32 clock)" `152  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 330 "2"
d G "UART_DATA" 2 331 "4"
d G "UART_AUTODETECT" 2 332 "8"
d G "UART_AUTODETECT_NOWAIT" 2 333 "9"
d G "UART_WAKEUP_ON_RDA" 2 334 "10"
d G "UART_SEND_BREAK" 2 335 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 339 "int32" `157 
f B "setup_comparator" 2 339 "void(int32 mode)" `156  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 342 "0x00"
d G "CP1_A1_A0" 2 344 "0x80"
d G "CP1_C1_A0" 2 345 "0x81"
d G "CP1_C2_A0" 2 346 "0x82"
d G "CP1_C3_A0" 2 347 "0x83"
d G "CP1_A1_VR" 2 348 "0x84"
d G "CP1_C1_VR" 2 349 "0x85"
d G "CP1_C2_VR" 2 350 "0x86"
d G "CP1_C3_VR" 2 351 "0x87"
d G "CP1_OUT_ON_A2" 2 352 "0x20"
d G "CP1_INVERT" 2 353 "0x10"
d G "CP2_A1_C0" 2 355 "0x8000"
d G "CP2_C1_C0" 2 356 "0x8100"
d G "CP2_C2_C0" 2 357 "0x8200"
d G "CP2_C3_C0" 2 358 "0x8300"
d G "CP2_A1_VR" 2 359 "0x8400"
d G "CP2_C1_VR" 2 360 "0x8500"
d G "CP2_C2_VR" 2 361 "0x8600"
d G "CP2_C3_VR" 2 362 "0x8700"
d G "CP2_OUT_ON_C4" 2 363 "0x2000"
d G "CP2_INVERT" 2 364 "0x1000"
d G "COMP_C1_LATCHED" 2 366 "0x300000"
d G "COMP_T1_SYNC" 2 367 "0x1000000"
d G "COMP_T1_GATE" 2 368 "0x2000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 375 "int8" `161 
f B "setup_vref" 2 375 "void(int8 mode)" `160  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 377 "0x20"
d G "VREF_HIGH" 2 378 "0x00"
d G "VREF_6th" 2 380 "0x10" "Turn on .6V ref"
d G "VREF_COMP1" 2 381 "0x80"
d G "VREF_COMP2" 2 382 "0x40"
c L "setup_vref" 2 3 2 "FUNCTION"
v L "mode" 2 387 "int8" `163 
f B "setup_oscillator" 2 387 "int8(int8 mode)" `162  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 389 "1"
d G "OSC_125KHZ" 2 390 "0x11"
d G "OSC_250KHZ" 2 391 "0x21"
d G "OSC_500KHZ" 2 392 "0x31"
d G "OSC_1MHZ" 2 393 "0x41"
d G "OSC_2MHZ" 2 394 "0x51"
d G "OSC_4MHZ" 2 395 "0x61"
d G "OSC_8MHZ" 2 396 "0x71"
d G "OSC_INTRC" 2 397 "1"
d G "OSC_NORMAL" 2 398 "0"
d G "OSC_STATE_STABLE" 2 400 "4"
d G "OSC_31KHZ_STABLE" 2 401 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 409 "int16" `165 
f B "setup_adc" 2 409 "void(int16 mode)" `164 
f B "read_adc" 2 410 "int8()" `166 
v L "mode" 2 411 "int8" `168 
f G "read_adc" 2 411 "int8(int8 mode)" `167 
f G "read_adc" 2 412 "int16()" `169 
v L "mode" 2 413 "int8" `171 
f G "read_adc" 2 413 "int16(int8 mode)" `170 
f B "adc_done" 2 414 "int8()" `172  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 416 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 417 "0x100"
d G "ADC_CLOCK_DIV_4" 2 418 "0x40"
d G "ADC_CLOCK_DIV_8" 2 419 "0x10"
d G "ADC_CLOCK_DIV_32" 2 420 "0x20"
d G "ADC_CLOCK_DIV_16" 2 421 "0x50"
d G "ADC_CLOCK_DIV_64" 2 422 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 423 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 426 "int32" `174 
f B "setup_adc_ports" 2 426 "void(int32 pins)" `173 
v L "pins" 2 427 "int32" `176 
v L "reference" 2 427 "int32" `177 
f G "setup_adc_ports" 2 427 "void(int32 pins,int32 reference)" `175 
v L "channel" 2 428 "int8" `179 
f B "set_adc_channel" 2 428 "void(int8 channel)" `178  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 432 "1" "| A0"
d G "sAN1" 2 433 "2" "| A1"
d G "sAN2" 2 434 "4" "| A2"
d G "sAN3" 2 435 "8" "| A4"
d G "sAN4" 2 436 "16" "| C0"
d G "sAN5" 2 437 "32" "| C1"
d G "sAN6" 2 438 "64" "| C2"
d G "sAN7" 2 439 "128" "| C3"
d G "sAN8" 2 440 "0x10000" "| C6"
d G "sAN9" 2 441 "0x20000" "| C7"
d G "sAN10" 2 442 "0x40000" "| B4"
d G "sAN11" 2 443 "0x80000" "| B5"
d G "NO_ANALOGS" 2 444 "0" "None"
d G "ALL_ANALOG" 2 445 "0xF00FF" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 2 448 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 449 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 2 452 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 453 "1"
d G "ADC_READ_ONLY" 2 454 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 460 "sint8" `181 
f B "abs" 2 460 "sint8(sint8 x)" `180 
v L "x" 2 461 "sint16" `183 
f G "abs" 2 461 "sint16(sint16 x)" `182 
v L "x" 2 462 "sint32" `185 
f G "abs" 2 462 "sint32(sint32 x)" `184 
v L "x" 2 463 "float" `187 
f G "abs" 2 463 "float(float x)" `186 
v L "??65535" 2 464 "int8" `189 
v L "??65535" 2 464 "int8" `190 
f B "_mul" 2 464 "int16(int8 ,int8 )" `188 
v L "??65535" 2 465 "sint8" `189 
v L "??65535" 2 465 "sint8" `193 
f G "_mul" 2 465 "sint16(sint8 ,sint8 )" `191 
v L "??65535" 2 466 "int16" `189 
v L "??65535" 2 466 "int16" `196 
f G "_mul" 2 466 "int32(int16 ,int16 )" `194 
v L "??65535" 2 467 "sint16" `189 
v L "??65535" 2 467 "sint16" `199 
f G "_mul" 2 467 "sint32(sint16 ,sint16 )" `197  "Memory Manipulation Prototypes:"
v L "bank" 2 470 "int8" `201 
v L "offset" 2 470 "int8" `202 
f B "read_bank" 2 470 "int8(int8 bank,int8 offset)" `200 
v L "bank" 2 471 "int8" `204 
v L "offset" 2 471 "int8" `205 
v L "value" 2 471 "int8" `206 
f B "write_bank" 2 471 "void(int8 bank,int8 offset,int8 value)" `203 
v L "dest" 2 472 "*int8" `208 
v L "src" 2 472 "*int8" `209 
f B "strcpy" 2 472 "void(*int8 dest,*int8 src)" `207 
v L "dest" 2 473 "*int8" `211 
v L "src" 2 473 "*int8" `212 
f B "strcopy" 2 473 "void(*int8 dest,*int8 src)" `210 
v L "destination" 2 474 "*int8" `214 
v L "value" 2 474 "int8" `215 
v L "num" 2 474 "int16" `216 
f B "memset" 2 474 "void(*int8 destination,int8 value,int16 num)" `213 
v L "destination" 2 475 "*int8" `218 
v L "source" 2 475 "*int8" `219 
v L "num" 2 475 "int16" `220 
f B "memcpy" 2 475 "void(*int8 destination,*int8 source,int16 num)" `217  "String Prototypes:"
v L "cvalue" 2 478 "int8" `222 
f B "toupper" 2 478 "int8(int8 cvalue)" `221 
v L "cvalue" 2 479 "int8" `224 
f B "tolower" 2 479 "int8(int8 cvalue)" `223 
v L "string" 2 480 "*int8" `226 
v L "cstring" 2 480 "*int8" `227 
f B "sprintf" 2 480 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `225  "Data Manipulators Prototypes:"
v L "address" 2 483 "*int8" `230 
v L "bytes" 2 483 "int8" `231 
v L "value" 2 483 "int8" `232 
f B "shift_left" 2 483 "int8(*int8 address,int8 bytes,int8 value)" `229 
v L "address" 2 484 "*int8" `234 
v L "bytes" 2 484 "int8" `235 
v L "value" 2 484 "int8" `236 
f B "shift_right" 2 484 "int8(*int8 address,int8 bytes,int8 value)" `233 
v L "address" 2 485 "*int8" `238 
v L "bytes" 2 485 "int8" `239 
f B "rotate_left" 2 485 "void(*int8 address,int8 bytes)" `237 
v L "address" 2 486 "*int8" `241 
v L "bytes" 2 486 "int8" `242 
f B "rotate_right" 2 486 "void(*int8 address,int8 bytes)" `240 
v L "value" 2 487 "int8" `244 
f B "swap" 2 487 "void(int8 value)" `243 
v L "var" 2 488 "int16" `246 
v L "offset" 2 488 "int8" `247 
f B "make8" 2 488 "int8(int16 var,int8 offset)" `245 
v L "var" 2 489 "int32" `246 
v L "offset" 2 489 "int8" `250 
f G "make8" 2 489 "int8(int32 var,int8 offset)" `248 
v L "varhigh" 2 490 "int8" `252 
v L "varlow" 2 490 "int8" `253 
f B "make16" 2 490 "int16(int8 varhigh,int8 varlow)" `251 
v L "var1" 2 491 "int16" `255 
f B "make32" 2 491 "int32(int16 var1)" `254 
v L "var1" 2 492 "int16" `257 
v L "var2" 2 492 "int16" `258 
f G "make32" 2 492 "int32(int16 var1,int16 var2)" `256 
v L "var1" 2 493 "int16" `257 
v L "var2" 2 493 "int8" `261 
f G "make32" 2 493 "int32(int16 var1,int8 var2)" `259 
v L "var1" 2 494 "int16" `263 
v L "var2" 2 494 "int8" `264 
v L "var3" 2 494 "int8" `265 
f G "make32" 2 494 "int32(int16 var1,int8 var2,int8 var3)" `262 
v L "var1" 2 495 "int8" `267 
f G "make32" 2 495 "int32(int8 var1)" `266 
v L "var1" 2 496 "int8" `257 
v L "var2" 2 496 "int8" `270 
f G "make32" 2 496 "int32(int8 var1,int8 var2)" `268 
v L "var1" 2 497 "int8" `263 
v L "var2" 2 497 "int8" `264 
v L "var3" 2 497 "int8" `274 
f G "make32" 2 497 "int32(int8 var1,int8 var2,int8 var3)" `271 
v L "var1" 2 498 "int8" `276 
v L "var2" 2 498 "int8" `277 
v L "var3" 2 498 "int8" `278 
v L "var4" 2 498 "int8" `279 
f G "make32" 2 498 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `275 
v L "var1" 2 499 "int8" `257 
v L "var2" 2 499 "int16" `282 
f G "make32" 2 499 "int32(int8 var1,int16 var2)" `280 
v L "var1" 2 500 "int8" `263 
v L "var2" 2 500 "int16" `264 
v L "var3" 2 500 "int8" `286 
f G "make32" 2 500 "int32(int8 var1,int16 var2,int8 var3)" `283 
v L "var1" 2 501 "int8" `263 
v L "var2" 2 501 "int8" `264 
v L "var3" 2 501 "int16" `290 
f G "make32" 2 501 "int32(int8 var1,int8 var2,int16 var3)" `287 
v L "var" 2 502 "int8" `292 
v L "bit" 2 502 "int8" `293 
f B "bit_set" 2 502 "void(int8 var,int8 bit)" `291 
v L "var" 2 503 "int16" `292 
v L "bit" 2 503 "int8" `296 
f G "bit_set" 2 503 "void(int16 var,int8 bit)" `294 
v L "var" 2 504 "int32" `292 
v L "bit" 2 504 "int8" `299 
f G "bit_set" 2 504 "void(int32 var,int8 bit)" `297 
v L "var" 2 505 "int8" `301 
v L "bit" 2 505 "int8" `302 
f B "bit_clear" 2 505 "void(int8 var,int8 bit)" `300 
v L "var" 2 506 "int16" `301 
v L "bit" 2 506 "int8" `305 
f G "bit_clear" 2 506 "void(int16 var,int8 bit)" `303 
v L "var" 2 507 "int32" `301 
v L "bit" 2 507 "int8" `308 
f G "bit_clear" 2 507 "void(int32 var,int8 bit)" `306 
v L "var" 2 508 "int8" `310 
v L "bit" 2 508 "int8" `311 
f B "bit_test" 2 508 "int8(int8 var,int8 bit)" `309 
v L "var" 2 509 "int16" `310 
v L "bit" 2 509 "int8" `314 
f G "bit_test" 2 509 "int8(int16 var,int8 bit)" `312 
v L "var" 2 510 "int32" `310 
v L "bit" 2 510 "int8" `317 
f G "bit_test" 2 510 "int8(int32 var,int8 bit)" `315  "#use delay() Prototypes:"
v L "count" 2 513 "int8" `319 
f B "delay_cycles" 2 513 "void(int8 count)" `318 
v L "time" 2 514 "int16" `321 
f B "delay_ms" 2 514 "void(int16 time)" `320 
v L "time" 2 515 "int16" `323 
f B "delay_us" 2 515 "void(int16 time)" `322  "#use rs232() Prototypes:"
v L "cdata" 2 518 "int8" `325 
f B "putchar" 2 518 "void(int8 cdata)" `324 
v L "cdata" 2 519 "int8" `327 
v L "stream" 2 519 "int8" `328 
f G "putchar" 2 519 "void(int8 cdata,int8 stream)" `326 
v L "string" 2 520 "*int8" `330 
f B "puts" 2 520 "void(*int8 string)" `329 
v L "string" 2 521 "*int8" `332 
v L "stream" 2 521 "int8" `333 
f G "puts" 2 521 "void(*int8 string,int8 stream)" `331 
f B "getch" 2 522 "int8()" `334 
v L "stream" 2 523 "int8" `336 
f G "getch" 2 523 "int8(int8 stream)" `335 
v L "string" 2 524 "*int8" `338 
f B "gets" 2 524 "void(*int8 string)" `337 
v L "string" 2 525 "*int8" `340 
v L "stream" 2 525 "int8" `341 
f G "gets" 2 525 "void(*int8 string,int8 stream)" `339 
f B "kbhit" 2 526 "int8()" `342 
v L "stream" 2 527 "int8" `344 
f G "kbhit" 2 527 "int8(int8 stream)" `343 
v L "string" 2 528 "*int8" `346 
f B "printf" 2 528 "void(*int8 string,*int8 _VA_LIST)" `345 
v L "stream" 2 529 "int8" `349 
v L "string" 2 529 "*int8" `350 
f B "fprintf" 2 529 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `348 
f B "putc_send" 2 530 "void()" `352 
v L "stream" 2 531 "int8" `354 
f B "fputc_send" 2 531 "void(int8 stream)" `353 
f B "rcv_buffer_full" 2 532 "int8()" `355 
v L "stream" 2 533 "int8" `357 
f G "rcv_buffer_full" 2 533 "int8(int8 stream)" `356 
f B "rcv_buffer_bytes" 2 534 "int16()" `358 
v L "stream" 2 535 "int8" `360 
f G "rcv_buffer_bytes" 2 535 "int16(int8 stream)" `359 
f B "tx_buffer_full" 2 536 "int8()" `361 
v L "stream" 2 537 "int8" `363 
f G "tx_buffer_full" 2 537 "int8(int8 stream)" `362 
f B "tx_buffer_bytes" 2 538 "int16()" `364 
v L "stream" 2 539 "int8" `366 
f G "tx_buffer_bytes" 2 539 "int16(int8 stream)" `365  "#use i2c() Prototypes:"
f B "i2c_read" 2 542 "int8()" `367 
v L "stream" 2 543 "int8" `369 
f G "i2c_read" 2 543 "int8(int8 stream)" `368 
v L "stream" 2 544 "int8" `371 
v L "ack" 2 544 "int8" `372 
f G "i2c_read" 2 544 "int8(int8 stream,int8 ack)" `370 
v L "data" 2 545 "int8" `374 
f B "i2c_write" 2 545 "int8(int8 data)" `373 
v L "stream" 2 546 "int8" `376 
v L "data" 2 546 "int8" `377 
f G "i2c_write" 2 546 "int8(int8 stream,int8 data)" `375 
f B "i2c_start" 2 547 "void()" `378 
v L "stream" 2 548 "int8" `380 
f G "i2c_start" 2 548 "void(int8 stream)" `379 
v L "stream" 2 549 "int8" `382 
v L "restart" 2 549 "int8" `383 
f G "i2c_start" 2 549 "void(int8 stream,int8 restart)" `381 
f B "i2c_stop" 2 550 "void()" `384 
v L "stream" 2 551 "int8" `386 
f G "i2c_stop" 2 551 "void(int8 stream)" `385 
f B "i2c_isr_state" 2 552 "int8()" `387 
v L "addr" 2 553 "int8" `389 
f B "i2c_slaveaddr" 2 553 "void(int8 addr)" `388 
v L "stream" 2 554 "int8" `391 
v L "addr" 2 554 "int8" `392 
f G "i2c_slaveaddr" 2 554 "void(int8 stream,int8 addr)" `390 
f B "i2c_poll" 2 555 "int8()" `393 
v L "stream" 2 556 "int8" `395 
f G "i2c_poll" 2 556 "int8(int8 stream)" `394 
v L "baud" 2 557 "int32" `397 
f B "i2c_init" 2 557 "void(int32 baud)" `396 
v L "stream" 2 558 "int8" `399 
v L "baud" 2 558 "int32" `400 
f G "i2c_init" 2 558 "void(int8 stream,int32 baud)" `398  "#use spi() Prototypes:"
f B "spi_xfer" 2 561 "int8()" `401 
f G "spi_xfer" 2 562 "int16()" `402 
f G "spi_xfer" 2 563 "int32()" `403 
v L "data" 2 564 "int8" `405 
f G "spi_xfer" 2 564 "int8(int8 data)" `404 
v L "data" 2 565 "int16" `407 
f G "spi_xfer" 2 565 "int16(int16 data)" `406 
v L "data" 2 566 "int32" `409 
f G "spi_xfer" 2 566 "int32(int32 data)" `408 
v L "stream" 2 567 "int8" `411 
v L "data" 2 567 "int8" `412 
f G "spi_xfer" 2 567 "int8(int8 stream,int8 data)" `410 
v L "stream" 2 568 "int8" `411 
v L "data" 2 568 "int16" `415 
f G "spi_xfer" 2 568 "int16(int8 stream,int16 data)" `413 
v L "stream" 2 569 "int8" `411 
v L "data" 2 569 "int32" `418 
f G "spi_xfer" 2 569 "int32(int8 stream,int32 data)" `416 
v L "stream" 2 570 "int8" `420 
v L "data" 2 570 "int8" `421 
v L "bits" 2 570 "int8" `422 
f G "spi_xfer" 2 570 "int8(int8 stream,int8 data,int8 bits)" `419 
v L "stream" 2 571 "int8" `420 
v L "data" 2 571 "int16" `421 
v L "bits" 2 571 "int8" `426 
f G "spi_xfer" 2 571 "int16(int8 stream,int16 data,int8 bits)" `423 
v L "stream" 2 572 "int8" `420 
v L "data" 2 572 "int32" `421 
v L "bits" 2 572 "int8" `430 
f G "spi_xfer" 2 572 "int32(int8 stream,int32 data,int8 bits)" `427 
v L "baud" 2 573 "int32" `432 
f B "spi_init" 2 573 "void(int32 baud)" `431 
v L "stream" 2 574 "int8" `434 
v L "baud" 2 574 "int32" `435 
f G "spi_init" 2 574 "void(int8 stream,int32 baud)" `433 
v L "baud" 2 575 "int32" `437 
f B "spi_speed" 2 575 "void(int32 baud)" `436 
v L "stream" 2 576 "int8" `439 
v L "baud" 2 576 "int32" `440 
f G "spi_speed" 2 576 "void(int8 stream,int32 baud)" `438 
v L "stream" 2 577 "int8" `442 
v L "baud" 2 577 "int32" `443 
v L "clock" 2 577 "int32" `444 
f G "spi_speed" 2 577 "void(int8 stream,int32 baud,int32 clock)" `441 
v L "data" 2 578 "int8" `446 
f B "spi_prewrite" 2 578 "void(int8 data)" `445 
v L "data" 2 579 "int16" `448 
f G "spi_prewrite" 2 579 "void(int16 data)" `447 
v L "data" 2 580 "int32" `450 
f G "spi_prewrite" 2 580 "void(int32 data)" `449 
v L "??65535" 2 581 "int8" `452 
v L "data" 2 581 "int8" `453 
f G "spi_prewrite" 2 581 "void(int8 ,int8 data)" `451 
v L "??65535" 2 582 "int8" `452 
v L "data" 2 582 "int16" `456 
f G "spi_prewrite" 2 582 "void(int8 ,int16 data)" `454 
v L "??65535" 2 583 "int8" `452 
v L "data" 2 583 "int32" `459 
f G "spi_prewrite" 2 583 "void(int8 ,int32 data)" `457 
f B "spi_xfer_in" 2 584 "int8()" `460 
f G "spi_xfer_in" 2 585 "int16()" `461 
f G "spi_xfer_in" 2 586 "int32()" `462 
v L "bits" 2 587 "int8" `464 
f G "spi_xfer_in" 2 587 "int8(int8 bits)" `463 
v L "bits" 2 588 "int8" `466 
f G "spi_xfer_in" 2 588 "int16(int8 bits)" `465 
v L "bits" 2 589 "int8" `468 
f G "spi_xfer_in" 2 589 "int32(int8 bits)" `467 
v L "stream" 2 590 "int8" `470 
v L "bits" 2 590 "int8" `471 
f G "spi_xfer_in" 2 590 "int8(int8 stream,int8 bits)" `469 
v L "stream" 2 591 "int8" `470 
v L "bits" 2 591 "int8" `474 
f G "spi_xfer_in" 2 591 "int16(int8 stream,int8 bits)" `472 
v L "stream" 2 592 "int8" `470 
v L "bits" 2 592 "int8" `477 
f G "spi_xfer_in" 2 592 "int32(int8 stream,int8 bits)" `475  "#use rtos() Prototypes:"
f B "rtos_run" 2 595 "void()" `478 
f B "rtos_yield" 2 596 "void()" `479 
v L "task" 2 597 "int8" `481 
f B "rtos_enable" 2 597 "void(int8 task)" `480 
v L "task" 2 598 "int8" `483 
f B "rtos_disable" 2 598 "void(int8 task)" `482 
f B "rtos_terminate" 2 599 "void()" `484 
v L "flag" 2 600 "int8" `486 
f B "rtos_await" 2 600 "void(int8 flag)" `485 
v L "sem" 2 601 "int8" `488 
f B "rtos_wait" 2 601 "void(int8 sem)" `487 
v L "sem" 2 602 "int8" `490 
f B "rtos_signal" 2 602 "void(int8 sem)" `489 
v L "task" 2 603 "int8" `492 
v L "msg" 2 603 "int8" `493 
f B "rtos_msg_send" 2 603 "void(int8 task,int8 msg)" `491 
f B "rtos_msg_read" 2 604 "int8()" `494 
f B "rtos_msg_poll" 2 605 "int8()" `495 
v L "task" 2 606 "int8" `497 
f B "rtos_overrun" 2 606 "int8(int8 task)" `496 
v L "task" 2 607 "int8" `499 
v L "stat" 2 607 "*int8" `500 
f B "rtos_stats" 2 607 "void(int8 task,*int8 stat)" `498  "#use timer() Prototypes:"
f B "get_ticks" 2 610 "int8()" `501 
f G "get_ticks" 2 611 "int16()" `502 
f G "get_ticks" 2 612 "int32()" `503 
v L "stream" 2 613 "int8" `505 
f G "get_ticks" 2 613 "int8(int8 stream)" `504 
v L "stream" 2 614 "int8" `507 
f G "get_ticks" 2 614 "int16(int8 stream)" `506 
v L "stream" 2 615 "int8" `509 
f G "get_ticks" 2 615 "int32(int8 stream)" `508 
v L "value" 2 616 "int8" `511 
f B "set_ticks" 2 616 "void(int8 value)" `510 
v L "value" 2 617 "int16" `513 
f G "set_ticks" 2 617 "void(int16 value)" `512 
v L "value" 2 618 "int32" `515 
f G "set_ticks" 2 618 "void(int32 value)" `514 
v L "stream" 2 619 "int8" `517 
v L "value" 2 619 "int8" `518 
f G "set_ticks" 2 619 "void(int8 stream,int8 value)" `516 
v L "stream" 2 620 "int8" `517 
v L "value" 2 620 "int16" `521 
f G "set_ticks" 2 620 "void(int8 stream,int16 value)" `519 
v L "stream" 2 621 "int8" `517 
v L "value" 2 621 "int32" `524 
f G "set_ticks" 2 621 "void(int8 stream,int32 value)" `522  "#use pwm() Prototypes:"
f B "pwm_on" 2 624 "void()" `525 
v L "stream" 2 625 "int8" `527 
f G "pwm_on" 2 625 "void(int8 stream)" `526 
f B "pwm_off" 2 626 "void()" `528 
v L "stream" 2 627 "int8" `530 
f G "pwm_off" 2 627 "void(int8 stream)" `529 
v L "duty" 2 628 "int16" `532 
f B "pwm_set_duty" 2 628 "void(int16 duty)" `531 
v L "stream" 2 629 "int8" `534 
v L "duty" 2 629 "int16" `535 
f G "pwm_set_duty" 2 629 "void(int8 stream,int16 duty)" `533 
v L "percent" 2 630 "int16" `537 
f B "pwm_set_duty_percent" 2 630 "void(int16 percent)" `536 
v L "stream" 2 631 "int8" `539 
v L "percent" 2 631 "int16" `540 
f G "pwm_set_duty_percent" 2 631 "void(int8 stream,int16 percent)" `538 
v L "frequency" 2 632 "int32" `542 
f B "pwm_set_frequency" 2 632 "void(int32 frequency)" `541 
v L "stream" 2 633 "int8" `544 
v L "frequency" 2 633 "int32" `545 
f G "pwm_set_frequency" 2 633 "void(int8 stream,int32 frequency)" `543  "#use capture() Prototypes:"
f B "get_capture_time" 2 636 "int16()" `546 
v L "stream" 2 637 "int8" `548 
f G "get_capture_time" 2 637 "int16(int8 stream)" `547 
f B "get_capture_event" 2 638 "int8()" `549 
v L "stream" 2 639 "int8" `551 
f G "get_capture_event" 2 639 "int8(int8 stream)" `550  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 652 "int16" `553 
f B "goto_address" 2 652 "void(int16 address)" `552 
v L "label" 2 653 "int16" `555 
f B "label_address" 2 653 "int16(int16 label)" `554  "Program Memory Prototypes:"
v L "address" 2 656 "int16" `557 
v L "dataptr" 2 656 "*int8" `558 
v L "count" 2 656 "int16" `559 
f B "read_program_memory" 2 656 "void(int16 address,*int8 dataptr,int16 count)" `556 
v L "address" 2 657 "int16" `561 
f B "read_program_eeprom" 2 657 "int16(int16 address)" `560  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 661 "int16" `562 
v L "address" 2 666 "__EEADDRESS__" `564 
f B "read_eeprom" 2 666 "int8(__EEADDRESS__ address)" `563 
v L "address" 2 667 "__EEADDRESS__" `566 
v L "value" 2 667 "int8" `567 
f B "write_eeprom" 2 667 "void(__EEADDRESS__ address,int8 value)" `565  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 674 "int32" `569 
f B "enable_interrupts" 2 674 "void(int32 interrupt)" `568 
v L "interrupt" 2 675 "int32" `571 
f B "disable_interrupts" 2 675 "void(int32 interrupt)" `570 
v L "interrupt" 2 676 "int32" `573 
f B "clear_interrupt" 2 676 "void(int32 interrupt)" `572 
v L "interrupt" 2 677 "int32" `575 
f B "interrupt_active" 2 677 "int8(int32 interrupt)" `574 
v L "interrupt" 2 678 "int32" `577 
f B "interrupt_enabled" 2 678 "int8(int32 interrupt)" `576 
v L "source" 2 679 "int8" `579 
v L "edge" 2 679 "int8" `580 
f B "ext_int_edge" 2 679 "void(int8 source,int8 edge)" `578 
v L "address" 2 680 "int16" `582 
f B "jump_to_irs" 2 680 "void(int16 address)" `581  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 682 "0x40"
d G "H_TO_L" 2 683 "0"
d G "GLOBAL" 2 685 "0x0BC0"
d G "PERIPH" 2 686 "0x0B40"
d G "INT_RTCC" 2 687 "0x000B20"
d G "INT_EXT_L2H" 2 688 "0x50000B10"
d G "INT_EXT_H2L" 2 689 "0x60000B10"
d G "INT_EXT" 2 690 "0x000B10"
d G "INT_AD" 2 691 "0x008C40"
d G "INT_TBE" 2 692 "0x008C10"
d G "INT_RDA" 2 693 "0x008C20"
d G "INT_TIMER1" 2 694 "0x008C01"
d G "INT_TIMER2" 2 695 "0x008C02"
d G "INT_CCP1" 2 696 "0x008C04"
d G "INT_SSP" 2 697 "0x008C08"
d G "INT_EEPROM" 2 698 "0x008D10"
d G "INT_TIMER0" 2 699 "0x000B20"
d G "INT_OSC_FAIL" 2 700 "0x008D80"
d G "INT_COMP" 2 701 "0x008D20"
d G "INT_COMP2" 2 702 "0x008D40"
d G "INT_RA" 2 703 "0x00FF0B08"
d G "INT_RB" 2 704 "0x21FF0B08"
d G "INT_RAB" 2 705 "0x02FF0B08"
d G "INT_RA0" 2 706 "0x0010B08"
d G "INT_RA1" 2 707 "0x0020B08"
d G "INT_RA2" 2 708 "0x0040B08"
d G "INT_RA3" 2 709 "0x0080B08"
d G "INT_RA4" 2 710 "0x0100B08"
d G "INT_RA5" 2 711 "0x0200B08"
d G "INT_RB4" 2 712 "0x1100B08"
d G "INT_RB5" 2 713 "0x1200B08"
d G "INT_RB6" 2 714 "0x1400B08"
d G "INT_RB7" 2 715 "0x1800B08"
D G "BATTERY_LOW" 0 2 "11"
D G "BATTERY_FULL" 0 3 "13.8"
V G "value" 0 5 "int16[3]" `598 
V G "TBL_POINTER_NEW" 0 6 "int16" `599 
V G "TBL_POINTER_OLD" 0 6 "int16" `600 
V G "Direction" 0 7 "int1" `601 
V G "Overload_Condition" 0 7 "int1" `602 
V G "step" 0 8 "int8" `603 
V G "Turn_On" 0 9 "int1" `604 
V G "Grid_Available" 0 10 "int8" `605 
V G "Battery_Voltage" 0 11 "float" `606 
V G "Temperature" 0 12 "float" `607 
V G "DUTY_CYCLE1" 0 14 "[25]" `608 
V G "DUTY_CYCLE2" 0 15 "[25]" `611 
F G "TIMER2_isr" 0 19 "void()" `614 
F G "CCP1_isr" 0 70 "void()" `615 
F G "TIMER1_isr" 0 79 "void()" `616 
F G "feedback" 0 85 "void()" `617 
F G "GPIO_Config" 0 99 "void()" `618 
F G "Read_Measure" 0 116 "void()" `619 
C L "Read_Measure" 0 120 1 "FUNCTION"
C L "Read_Measure" 0 120 1 "FUNCTION"
F G "LED_Sequence" 0 139 "void()" `628 
C L "LED_Sequence" 0 120 1 "FUNCTION"
C L "LED_Sequence" 0 120 1 "FUNCTION"
F G "Check_Button" 0 183 "void()" `632 
C L "Check_Button" 0 120 1 "FUNCTION"
C L "Check_Button" 0 120 1 "FUNCTION"
F G "Mains_Detect" 0 204 "void()" `633 
F G "Charge_Batt" 0 223 "void()" `634 
C L "Charge_Batt" 0 120 1 "FUNCTION"
F G "Overload_Detect" 0 236 "void()" `635 
C L "Overload_Detect" 0 120 1 "FUNCTION"
F G "MAIN" 0 248 "void()" `636 
C L "MAIN" 0 120 1 "FUNCTION"
C L "MAIN" 0 120 1 "FUNCTION"
C L "MAIN" 0 120 1 "FUNCTION"
C L "MAIN" 0 120 1 "FUNCTION"
C L "MAIN" 0 120 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
